{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"OffbeatWP","text":"<p>For full documentation visit https://offbeatwp.github.io/docs/.</p>"},{"location":"how-to/assets/compile/","title":"Compiling assets","text":"<p>OffbeatWP has an assets builder based on web pack. It can build sass, es6 javascript and images. Besides that the builder contains browser-sync to have an easier workflow during development.</p> <p>The first time you have to get the dependencies by running to the following command from the root of your OffbeatWP theme</p> <pre><code>yarn install    |or|    npm install\n</code></pre> <p>To run the builder for development:</p> <p><code>yarn offbeatwp dev</code></p> <p>To run the builder for production:</p> <p><code>yarn offbeatwp production</code></p>"},{"location":"how-to/assets/compile/#sass","title":"Sass","text":"<p>Your sass files should be in <code>resources/sass/</code> folder. The <code>main.scss</code> file is the entry-file for you sass</p>"},{"location":"how-to/assets/compile/#javascript","title":"Javascript","text":"<p>Your js files should be in <code>resources/js/</code> folder. The <code>main.js</code> file is the entry-file for your javascript. Javascript can be written in ES6.</p>"},{"location":"how-to/assets/compile/#icon-font","title":"Icon Font","text":"<p>The builder can create icon fonts for you. Just create an <code>icons</code> folder in <code>/resources/</code> and move some <code>.svg</code> files into to. Next, run the command from the route of your OffbeatWP Theme folder:</p> <pre><code>yarn offbeatwp icons\n</code></pre> <p>Next add the following line to your <code>resources/sass/main.scss</code> file:</p> <pre><code>@import \"../fonts/icons/icons\";\n</code></pre> <p>Check this file how to show the icon in your html.</p> <p>To give an example of an icon in HTML</p> <pre><code>&lt;i class = 'icons icons-pen-square-solid'&gt;&lt;/i&gt;\n</code></pre>"},{"location":"how-to/basics/components/","title":"Components","text":"<p>OffbeatWP is a component driven framework for Wordpress. Components are blocks that can be rendered into your view. Components are really flexible and can be mapped to widgets, page builder elements, shortcodes and later even Gutenberg blocks.</p> <p>A component can have its own class that contains all the information, settings and logic to render the component. </p>"},{"location":"how-to/basics/components/#creating-a-component","title":"Creating a component","text":"<p>A component can easily be generated by OffbeatWP through the CLI:</p> <pre><code>wp offbeatwp make-component {name}\n</code></pre> <p>If you want to create a component for a module you can do this by adding <code>--module={module_name}</code> to the command line:</p> <pre><code>wp offbeatwp make-component {name} --module=\"{module}\"\n</code></pre> <p>The command also accepts an argument <code>--supports=\"\"</code> containing a comma-separated list of interfaces the components support</p>"},{"location":"how-to/basics/components/#rendering-a-component","title":"Rendering a component","text":"<p>Without supporting other interfaces the only way to render you component within a view is by calling the component within a twig template: <code>{{ component('COMPONENT_NAME', {}) }}</code></p> <p>When the component is in your <code>/components/</code> folder the name will be equal to the folder of your component. The first character will be lowercased automatically. So component <code>Jumbotron</code> will get the name <code>Jumbotron</code>.</p> <p>If the component is in one of your modules the name will be prefixed with the name of your module (the first character will be lowercased here as well). So a component \"List\" in the module \"Downloads\" will get the name \"download.list\".</p>"},{"location":"how-to/basics/components/#supporting-interfaces","title":"Supporting Interfaces","text":"<p>Currently, there are 3 supported interfaces</p> <ol> <li><code>widget</code></li> <li><code>shortcode</code></li> <li><code>page builder</code></li> </ol> <p>To add support of one of the interface to your component you only have to add it to the supports attribute in the settings method, like: </p> <pre><code>public static function settings()\n{\n    return [\n        'name'       =&gt; 'Pino',\n        'slug'       =&gt; 'pino',\n        'supports'   =&gt; ['widget', 'shortcode', 'pagebuilder'],\n    ];\n}\n</code></pre> <p>A fourth interface will be added soon: 'editor' for Gutenberg</p>"},{"location":"how-to/basics/components/#page-builder","title":"Page builder","text":"<p>OffbeatWP has implemented a really flexibele page builder into Wordpress. It's integration with Advanced Custom Fields. It provides you with a drag-and-drop editor the build your pages. The awesome thing about this builder is that you have 100% control over the output of the editor.</p> <p>Check out more information about the ACF Page Builder implementation for OffbeatWP</p>"},{"location":"how-to/basics/components/#form","title":"Form","text":"<p>You can define a form to a component so it's easy to insert data from a page builder, widget or any other implementation. </p> <p>To do so you have to define a form in the settings method like:</p> <pre><code>public static function settings()\n{\n    return [\n        'name'       =&gt; 'Button',\n        'slug'       =&gt; 'button',\n        'supports'   =&gt; ['pagebuilder', 'editor', 'shortcode'],\n        'form'       =&gt; self::form(),\n    ];\n}\n</code></pre> <p>The attribute should be an instance of <code>\\OffbeatWP\\Form\\Form:class</code>. Below an example of the <code>form()</code> method that should be included inside the component class:</p> <pre><code>public static function form()\n{\n    $form = new Form();\n\n    $form\n        -&gt;addTab('general', 'General')\n            -&gt;addSection('general', 'General')\n                -&gt;addField(new \\OffbeatWP\\Form\\Fields\\Text('title', 'Title'))\n                -&gt;addField(new \\OffbeatWP\\Form\\Fields\\Text('title1', 'Title 1'))\n                -&gt;addField(new \\OffbeatWP\\Form\\Fields\\Text('title2', 'Title 2'))\n        -&gt;addTab('general2', 'General')\n            -&gt;addSection('general2', 'General')\n                -&gt;addField(new \\OffbeatWP\\Form\\Fields\\Text('title2', 'Title'))\n                -&gt;addField(new \\OffbeatWP\\Form\\Fields\\Text('title21', 'Title 1'))\n                -&gt;addField(new \\OffbeatWP\\Form\\Fields\\Text('title22', 'Title 2'));\n\n    return $form;\n}\n</code></pre> <p>More about the <code>Form</code> functionality you'll find at Forms</p>"},{"location":"how-to/basics/controllers/","title":"Controllers","text":"<p>Below a basic example of a controller:</p> <pre><code>namespace App\\Controllers;\n\nuse OffbeatWP\\Controllers\\AbstractController;\nuse App\\Models\\PostModel;\n\nclass PostsController extends AbstractController {\n    public function actionSingle(PostModel $post)\n    {\n        return $this-&gt;render('posts/single', ['post' =&gt; $post]);\n    }\n\n    public function actionArchive($posts)\n    {\n        return $this-&gt;render('posts/archive', ['posts' =&gt; $posts]);\n    }\n}\n</code></pre> <p>The action within the controller should do all the logic needed for the request. The action can return a <code>string</code> or an <code>array</code>. A string is been echoed to the user directly, and an array is encoded to JSON automatically first and then echoed to the user as well.</p>"},{"location":"how-to/basics/controllers/#views","title":"Views","text":"<p>Within the controller, you have the possibility to render and view with the <code>view</code> method. The <code>view</code> method accepts two arguments: 1. The view that needs to be rendered 2. The data that needs to be sent to your view.</p> <p>OffbeatWP is going to look for the view in the nearest <code>views</code> directory. If it doesn't find the given view there it will continue the search. If the view isn't found it will try to find the view in the theme' <code>views</code> directory. This can be found in <code>/resources/views/</code>. So practically:</p> <ol> <li>Controllers in the <code>app/Controllers</code> directories will searching for the views in <code>/resources/views</code>. </li> <li>Controllers in a module will check /modules/YOUR_MODULE/views/ first and if it can't find the view there it will check <code>/resources/views/</code> </li> </ol>"},{"location":"how-to/basics/controllers/#json","title":"JSON","text":"<p>If your action returns an array it will be converted to a JSON string and then echoed to the user. The content-type will be changed to <code>application/json</code> as well.</p>"},{"location":"how-to/basics/forms/","title":"Forms","text":"<p>The <code>\\OffbeatWP\\Form\\Form</code> is an abstract implementation that can be mapped to the right structure depending on the implementation you're using. The forms are currently used for Components and SiteSettings. </p>"},{"location":"how-to/basics/forms/#form-structure","title":"Form Structure","text":"<p>The current structure of a form is like this: <pre><code>- Form\n    - Tab\n        - Section\n            - Field\n        - Repeater\n            - Field\n</code></pre></p> <p>The use of tabs in a Component context is mandatory, but for SiteSettings, it isn't. A Section is not mandatory but really helps to structure your fields.</p> <p>A more advanced example of a form: <pre><code>$form = new Form();\n\n$columnsField = Select::make('title2', 'Title');\n$columnsField-&gt;addOptions(['2' =&gt; '2', '3' =&gt; '3', '4' =&gt; '4'])\n\n$form\n    -&gt;addTab('general', 'General')\n        -&gt;addSection('general', 'General')\n            -&gt;addField(Text::make('title', 'Title'))\n            -&gt;addField(Editor::make('content', 'Content'))\n    -&gt;addTab('Appearance', 'Appearance')\n        -&gt;addSection('appearance', 'Appearance')\n            -&gt;addField($columnsField)\n        -&gt;addRepeater('pros_list', 'Pro list')\n            -&gt;addField(Text::make('pro', 'Pro'));\n</code></pre></p>"},{"location":"how-to/basics/forms/#fields","title":"Fields","text":"<p>Below the fields that are currently been integrated:</p>"},{"location":"how-to/basics/forms/#text","title":"Text","text":"<pre><code>Text::make($id, $label)\n</code></pre>"},{"location":"how-to/basics/forms/#textarea","title":"Textarea","text":"<pre><code>TextArea::make($id, $label)\n</code></pre>"},{"location":"how-to/basics/forms/#editor","title":"Editor","text":"<pre><code>Editor::make($id, $label)\n</code></pre>"},{"location":"how-to/basics/forms/#select","title":"Select","text":"<p>The selected value will be returned as a string.</p> <pre><code>Select::make($value, $label)\n</code></pre> <p>To define options you can first construct the field and then assign the options:</p> <pre><code>$selectField = Select::make($id, $label);\n$selectField-&gt;addOptions(['fieldValue' =&gt; 'Field Label']);\n\n// or add single option:\n$selectField-&gt;addOption('fieldValue', 'Field Label']);\n</code></pre> <p>Or chain it: <pre><code>$selectField = Select::make($id, $label)-&gt;addOptions(['fieldValue' =&gt; 'Field Label']);\n</code></pre></p>"},{"location":"how-to/basics/forms/#image","title":"Image","text":"<pre><code>Image::make($id, $label);\n</code></pre>"},{"location":"how-to/basics/forms/#truefalse","title":"TrueFalse","text":"<pre><code>TrueFalse::make($id, $label);\n</code></pre>"},{"location":"how-to/basics/forms/#post","title":"Post","text":"<p>Selecting a post</p> <pre><code>$postField = Post::make($id, $label);\n\n// if you only want from specific post types\n$postField-&gt;fromPostTypes(['post']);\n</code></pre>"},{"location":"how-to/basics/forms/#posts","title":"Posts","text":"<p>Selecting multiple posts</p> <pre><code>$postsField = Posts::make($id, $label);\n\n// if you only want from specific post types\n$postsField-&gt;fromPostTypes(['post']);\n</code></pre>"},{"location":"how-to/basics/forms/#term","title":"Term","text":"<p>Selecting a term</p> <pre><code>$termField = Term::make($id, $label);\n\n// if you only want from specific taxonomies\n$termField-&gt;fromTaxonomies(['post']);\n</code></pre>"},{"location":"how-to/basics/forms/#terms","title":"Terms","text":"<p>Selecting multiple terms</p> <pre><code>$termsField = Terms::make($id, $label);\n\n// if you only want from specific taxonomies\n$termsField-&gt;fromTaxonomies(['post']);\n</code></pre>"},{"location":"how-to/basics/forms/#navmenu","title":"NavMenu","text":"<p>Selecting a nav menu</p> <pre><code>NavMenu::make($id, $label);\n</code></pre>"},{"location":"how-to/basics/forms/#user","title":"User","text":"<p>Selecting a user</p> <pre><code>User::make($id, $label);\n</code></pre>"},{"location":"how-to/basics/forms/#users","title":"Users","text":"<p>Selecting multiple users</p> <pre><code>Users::make($id, $label);\n</code></pre>"},{"location":"how-to/basics/forms/#breakpoints","title":"Breakpoints","text":"<p>Selecting one of the default bootstrap breakpoints</p> <pre><code>Breakpoint::make($id, $label);\n</code></pre>"},{"location":"how-to/basics/forms/#textalign","title":"TextAlign","text":"<p>Select box with text-align options</p> <pre><code>TextAlign::make($id, $label);\n</code></pre>"},{"location":"how-to/basics/forms/#horizontalalign","title":"HorizontalAlign","text":"<p>Select box with horizontal align options</p> <pre><code>HorizontalAlign::make($id, $label);\n</code></pre>"},{"location":"how-to/basics/forms/#vericalalign","title":"VericalAlign","text":"<p>Select box with vertical-align options</p> <pre><code>VericalAlign::make($id, $label);\n</code></pre>"},{"location":"how-to/basics/forms/#creating-your-own-fields","title":"Creating your own fields","text":"<p>In some cases, it could be interesting to create your own fields by extending OffbeatWP Fields so you can re-use them. The right place to this is in an <code>app/Form/Fields</code> folder from the root of your theme.</p> <p>If for example, you want to have a field to define a rating create a file named <code>Rating.php</code> in your <code>app/Form/Fields</code> directory, containing:</p> <pre><code>&lt;?php\nnamespace App\\Form\\Fields;\n\nuse \\OffbeatWP\\Form\\Fields\\Select;\n\nclass Rating extends Select {\n\n    public function __construct()\n    {        \n        $this-&gt;addOptions([\n            '' =&gt; __('No Rating', 'offbeatwp'),\n            '1' =&gt; __('No Way', 'offbeatwp'),\n            '2' =&gt; __('Mwah', 'offbeatwp'),\n            '3' =&gt; __('It\\'s ok', 'offbeatwp'),\n            '4' =&gt; __('Pretty awesome actually', 'offbeatwp'),\n            '5' =&gt; __('Awesomsaus', 'offbeatwp'),\n        ]);\n\n        parent::__construct();\n    }\n\n}\n</code></pre> <p>Within the form you do:</p> <pre><code>$form-&gt;.......-&gt;addField(Rating::make($id, $label))\n</code></pre>"},{"location":"how-to/basics/forms/#field-collections","title":"Field Collections","text":"<p>Field collections are a combination of fields that can be reused, current collections available:</p> <p>Adding a fields collection to a form must be done with the <code>-&gt;addFields</code> method.</p> <pre><code>$form-&gt;.......-&gt;addFields(Heading::make())\n</code></pre>"},{"location":"how-to/basics/forms/#heading","title":"Heading","text":"<p>The heading fields collection automatically adds the following fields to your form: - Title (text field) - Heading Type (select box is h1-h6) - Heading Style (select box is h1-h6)</p> <pre><code>Heading::make();\n</code></pre>"},{"location":"how-to/basics/forms/#link","title":"Link","text":"<p>The Link fields collection automatically adds the following fields to your form: - Link label (text field) - Link url (text field) - Link target (selectbox is _blank, _self, _top)</p> <pre><code>Link::make();\n</code></pre>"},{"location":"how-to/basics/forms/#defining-your-own-collections","title":"Defining your own Collections","text":"<p>In some cases, it could be interesting to create your own fields collection so you can reuse them. The right place to this is in an <code>app/Form/FieldsCollections</code> folder from the root of your theme.</p> <pre><code>namespace App\\Form\\FieldsCollections;\n\nuse \\OffbeatWP\\Form\\FieldsCollections\\AbstractFieldsCollection;\nuse \\OffbeatWP\\Form\\Fields\\Text;\n\nclass SocialLinks extends AbstractFieldsCollection {\n    public function __construct()\n    {\n        $this-&gt;addField(Text::make('facebook_link', __('Facebook link', 'offbeatwp')));\n        $this-&gt;addField(Text::make('instagram_link', __('Instagram link', 'offbeatwp')));\n        $this-&gt;addField(Text::make('twitter_link', __('Twitter link', 'offbeatwp')));\n    }\n}\n</code></pre> <p>To use this within the form:</p> <pre><code>$form-&gt;.......-&gt;addFields(SocialLinks::make())\n</code></pre>"},{"location":"how-to/basics/forms/#example-of-a-form-being-used-within-a-component","title":"Example of a form being used within a component","text":"<p>In this example, we want the user to be able to select a 'Person' which is a custom post type. <pre><code>class PersonCard extends AbstractComponent\n{\n    public static function settings(): array\n    {\n        return [\n            'name' =&gt; __('Person Card', 'offbeatwp'),\n            'slug' =&gt; 'person-card',\n            'supports' =&gt; ['pagebuilder', 'editor']\n        ];\n    }\n\n    public static function getForm(): Form {\n        $form = new Form();\n\n        $form-&gt;addField(Post::make('personId', __('Person', 'raow'))-&gt;fromPostTypes([PersonModel::POST_TYPE]));\n\n        return $form;\n    }\n\n    public function render($settings)\n    {\n        return $this-&gt;view('person-card', [\n            'settings' =&gt; $settings, \n            'person' =&gt; new PersonModel($settings-&gt;personId)\n        ]);\n    }\n}\n</code></pre></p>"},{"location":"how-to/basics/globals/","title":"Globals","text":"<p>If you want to call a function in your twig file, you have the option to do this via a global.</p> <p>First of all, I have made a class GeneralHelper (located in App/Helpers). The only thing this class is doing is return the $_GET value.</p> <pre><code>&lt;?php\n\nnamespace App\\Helpers;\n\nclass GeneralHelper\n{\n\n    public function getParameter($key)\n    {\n        return isset($_GET[$key]) ? $_GET[$key] : null;\n    }\n\n}\n</code></pre> <p>Now we have to register the global in the SiteService.php file. </p> <pre><code>$view-&gt;registerGlobal('app', new GeneralHelper());\n</code></pre> <p>Now you can call it in the twig file</p> <pre><code>{{ app.getParameter('searchBox') }}\n</code></pre>"},{"location":"how-to/basics/models/","title":"Models","text":"<p>Models are one of the cool features of OffbeatWP. It makes \"The Loop\" obsolete and gives a much more intuitive way of getting data from a post or term like the title, content or url.</p> <p>OffbeatWP has three important types of models: 1. Post Models     A post model represents a post in a specific post type 2. Term Models     A term model represents a term in a specific taxonomy 3. User Models     A user model represents a user with one or more specific roles.</p> <p>Here, we will describe some methods that are shared by all models. In these examples we will use</p>"},{"location":"how-to/basics/models/#retrieving-an-existing-model-from-the-database","title":"Retrieving an existing model from the database","text":"<p>The easiest way to retrieve a single model that already exists is throught he find method. <pre><code>ExampleModel::find(?int $id): ?ExampleModel;\n</code></pre> This method will retrieve the model with the given ID, provided it matches the post type of the model it was called on. If a post with the given ID does not exist or has a different post type, the method will return NULL.</p> <p>The method expects a POSITIVE int as argument. If an int of 0 or lower is passed, it will immediately return NULL without doing a query.</p>"},{"location":"how-to/basics/models/#retrieving-metadata-on-a-post","title":"Retrieving metadata on a post","text":"<p>All models have helper methods that can be used to retrieve metadata as a specific type. If the metadata does not exist, then the falsy version of the respective type is returned. (EG: An empty string if you call getMetaString) If you want to check if the meta value exists on a post, use the hasMeta method.</p> <p>Available methods:</p> <pre><code>ExampleModel-&gt;getMetaString(string $metaKey): string;\nExampleModel-&gt;getMetaInt(string $metaKey): int;\nExampleModel-&gt;getMetaFloat(string $metaKey): float;\nExampleModel-&gt;getMetaBool(string $metaKey): bool;\nExampleModel-&gt;getMetaArray(string $metaKey, $single = true): array;\nExampleModel-&gt;getMetaDateTime(string $metaKey): ?WpDateTime;\nExampleModel-&gt;getMetaDateTimeImmuteable(string $metaKey): ?WpDateTimeImmuteable;\n</code></pre>"},{"location":"how-to/basics/modules/","title":"Modules","text":"<p>Modules are basically just services. What makes a module special is that it can contain it's own grouped functionality. This makes it useful for functionality that you easily want to share with other projects, are functionality that is so big that you want to have it all as a group.</p>"},{"location":"how-to/basics/modules/#creating-modules","title":"Creating modules","text":"<p>OffbeatWP has a CLI command to easily create a module for you:</p> <p><code>wp offbeatwp make-module {name}</code></p> <p>If you want to use the module you need to activate it. You can do this by editing the services.php file. It is located in the config folder and it looks like this.  </p> <pre><code>return [\n    OffbeatWP\\Twig\\Service::class,\n    App\\Services\\SiteService::class,\n    OffbeatWP\\AcfLayout\\Service::class,\n    OffbeatWP\\GravityForms\\Service::class,\n    OffbeatWP\\GravityFormsBootstrapV4\\Service::class,\n    OffbeatWP\\AcfSiteSettings\\Service::class,\n    Modules\\KnowledgeBase\\KnowledgeBase::class\n];\n</code></pre> <p>As you can see, I have registered my module at the bottom line.</p> <p><code>Modules\\KnowledgeBase\\KnowledgeBase::class</code></p> <p>A simple module would look like this:</p> <pre><code>\u251c\u2500\u2500 Agenda.php\n\u251c\u2500\u2500 Components\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 AgendaOverview\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 AgendaOverview.php\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 views\n\u2502\u00a0\u00a0         \u2514\u2500\u2500 agenda-overview.twig\n\u251c\u2500\u2500 Controllers\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 AgendaController.php\n\u251c\u2500\u2500 Models\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 EventCategoryModel.php\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 EventModel.php\n\u251c\u2500\u2500 Repositories\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 AgendaRepository.php\n\u2514\u2500\u2500 views\n    \u2514\u2500\u2500 single.twig\n</code></pre>"},{"location":"how-to/basics/post_models/","title":"Post Models","text":"<p>Models are one of the cool features of OffbeatWP. It makes \"The Loop\" obsolete and gives a much more intuitive way of getting data from a post or term like the title, content or url.</p> <p>OffbeatWP has two important types of models: 1. Post models      A post model represents a post in a specific post type 2. Term Models     A term model represents a term in a specific taxonomy</p> <p>A post model represents a post of a specific post type. Below an example of a post model:</p> <pre><code>namespace App\\Models;\n\nuse OffbeatWP\\Content\\Post\\PostModel;\n\nclass WpPostModel extends PostModel {\n    public const POST_TYPE = 'post';\n    public const ORDER_BY = 'menu_order';\n    public const ORDER = 'ASC';\n}\n</code></pre> <p>It is easy to extend the model so you can get the data of a post in a readable and intuitive way. If you have a post type for <code>events</code> it would be great to have a getter just for this:</p> <pre><code>namespace App\\Models;\n\nuse OffbeatWP\\Content\\Post\\PostModel;\n\nclass EventModel extends PostModel {\n    public const POST_TYPE = 'event';\n\n    public function getEventDate()\n    {\n        return $this-&gt;getMeta('event_date');\n    }\n}\n</code></pre> <p>Now you can can easy get the post' event date by doing <code>$event-&gt;getEventDate();</code>. In twig it even shorter: <code>{{ event.eventdate }}</code>.</p>"},{"location":"how-to/basics/post_models/#creating-a-model","title":"Creating a model","text":"<p>To create a model you can use the CLI-command:</p> <pre><code>wp offbeatwp make-postmodel {name} --post_type=\"{post_type}\"\n</code></pre> <p>If you want to create a model for a module you can do this by adding <code>--module={module_name}</code> to the command like:</p> <pre><code>wp offbeatwp make-postmodel {name} --post_type={post_type}--module={module_name}\n</code></pre>"},{"location":"how-to/basics/post_models/#getting-data-from-a-model","title":"Getting data from a model","text":"<p>By default the PostModel comes with the following methods to get data from the post:</p>"},{"location":"how-to/basics/post_models/#getpreviouspostfalse","title":"<code>getPreviousPost(false, '', '')</code>","text":"<p>Get the previous post</p>"},{"location":"how-to/basics/post_models/#getnextpostfalse","title":"<code>getNextPost(false, '', '')</code>","text":"<p>Get the next post (you can use all the methods below)</p>"},{"location":"how-to/basics/post_models/#getid","title":"<code>getId()</code>","text":"<p>Get children of post</p>"},{"location":"how-to/basics/post_models/#getchildren","title":"<code>getChildren()</code>","text":"<p>Get the id of the post</p>"},{"location":"how-to/basics/post_models/#gettitle","title":"<code>getTitle()</code>","text":"<p>Get the title of the post</p>"},{"location":"how-to/basics/post_models/#getcontent","title":"<code>getContent()</code>","text":"<p>Get the content of the post</p>"},{"location":"how-to/basics/post_models/#getslug","title":"<code>getSlug()</code>","text":"<p>Get the post' post_name / slug</p>"},{"location":"how-to/basics/post_models/#getpermalink","title":"<code>getPermalink()</code>","text":"<p>Get the post' url</p>"},{"location":"how-to/basics/post_models/#getpostdateformat","title":"<code>getPostDate($format = '')</code>","text":"<p>Get the id of the post</p>"},{"location":"how-to/basics/post_models/#getexcerpt","title":"<code>getExcerpt()</code>","text":"<p>Get the excerpt of the post</p>"},{"location":"how-to/basics/post_models/#getauthor","title":"<code>getAuthor()</code>","text":"<p>Get the author of the post</p>"},{"location":"how-to/basics/post_models/#getmetakey-single-true","title":"<code>getMeta($key, $single = true)</code>","text":"<p>Get a meta value of the post. The first attribute is the key to the meta. The second parameter is if you desire a single or multiple responses. Single is the default.</p>"},{"location":"how-to/basics/post_models/#setmetakey-value","title":"<code>setMeta($key, $value)</code>","text":"<p>Setting a meta to the post. The argument is the key, the second the value of the meta.</p>"},{"location":"how-to/basics/post_models/#gettermstaxonomy-args","title":"<code>getTerms(taxonomy, $args = [])</code>","text":"<p>Get the terms of the post by taxonomy. The first argument is the taxonomy. With the second parameter, you can set some additional arguments. These arguments are equal to the WP_Term_Query::__construct method.</p>"},{"location":"how-to/basics/post_models/#hasfeaturedimage","title":"<code>hasFeaturedImage()</code>","text":"<p>Check if the post has a featured image. Returns true or false.</p>"},{"location":"how-to/basics/post_models/#getfeaturedimagesize-thumbnail-attr","title":"<code>getFeaturedImage($size = 'thumbnail', $attr = [])</code>","text":"<p>Returns html (img-tag) of the post' featured image. With the first argument you can define the size, the second you send arguments which are equal to get_the_post_thumbnail</p>"},{"location":"how-to/basics/post_models/#getfeaturedimageurlsize-thumbnail","title":"<code>getFeaturedImageUrl($size = 'thumbnail')</code>","text":"<p>Get the post' featured image url</p>"},{"location":"how-to/basics/post_models/#getfeaturedimageid","title":"<code>getFeaturedImageId()</code>","text":"<p>Get the post' featured image id. Returns false if the post has no featured image.</p>"},{"location":"how-to/basics/post_models/#setup","title":"<code>setup()</code>","text":"<p>If some plugin or other implementation requires a post to be in \"the loop\" you can run this method. </p>"},{"location":"how-to/basics/post_models/#emd","title":"<code>emd()</code>","text":"<p>Ends \"The loop\"</p>"},{"location":"how-to/basics/post_models/#default-post-type-ordering","title":"Default post type ordering","text":"<p>You can add the constant <code>ORDER</code> and <code>ORDER_BY</code> to a model. Now every time you are getting posts this ordering is applied.</p>"},{"location":"how-to/basics/post_models/#macro","title":"Macro","text":"<p>You can extend any post model from outside the model itself. This is called a macro. We have a independent service to integrate [Advanded Custom Fields }(https://www.advancedcustomfields.com/pro/) with OffbeatWP. Within the post model, we want to be able to easily get an ACF field. The service contains the following <code>macro</code>:</p> <pre><code>PostModel::macro('getField', function ($name, $format = true) {\n    return get_field($name, $this-&gt;getId(), $format);\n});\n</code></pre> <p>Now we can easily access the post' ACF field be doing:</p> <pre><code>post.getField('key')\n</code></pre>"},{"location":"how-to/basics/post_models/#associating-a-post-type-to-a-model","title":"Associating a post-type to a model","text":"<p>OffbeatWP maps posts to the related model. But to make this possible we have to register the models. When you register the post type within your theme you can do this all at once as explained here. But if the post_type is Building (like post and page), or is defined within a plugin you have to do this by:</p> <pre><code>offbeat('post-type')-&gt;registerPostModel('post', \\App\\Models\\WpPostModel::class);\n</code></pre> <p>The first argument is the post_type and the second the PostModel.</p>"},{"location":"how-to/basics/post_models/#getting-posts","title":"Getting posts","text":"<p>You can get posts from the model just by doing the following:</p> <pre><code>WpPostModel::query()-&gt;all();\n</code></pre> <p>This will get you the number of posts as configured in the WordPress settings (Settings &gt; Reading).</p> <pre><code>WpPostModel::query()-&gt;all();\n</code></pre> <p>Get a paginated version of the postModel</p> <pre><code>WpPostModel::query()-&gt;paginated()\n</code></pre> <p>Get posts except from the Id's you have added </p> <pre><code>WpPostModel::query()-&gt;whereIdNotIn($ids);\n</code></pre> <p>This will get you all the posts.</p> <pre><code>WpPostModel::query()-&gt;take(5);\n</code></pre> <p>This will get you the first 5 posts. </p> <pre><code>WpPostModel::query()-&gt;first();\n</code></pre> <p>This will get you the first post.</p> <pre><code>WpPostModel::query()-&gt;findbyId($id);\n</code></pre> <p>Find a post by id.</p> <p>Alternatively, you can use the following shorthand to get a post by it's ID: <pre><code>PostModel::find($id);\n</code></pre></p>"},{"location":"how-to/basics/post_models/#filtering-posts","title":"Filtering posts","text":"<p>OffbeatWP comes with a variety of methods to filter your posts:</p> <pre><code>where($args)\n</code></pre> <p>The arguments are equal to WP_Query. But since this won't make your code very readable we do not recommend this filter.</p> <pre><code>whereTerm($taxonomy, $terms = [], $field = 'slug', $operator = 'IN')\n</code></pre> <p>Filter the posts by a term. </p> <pre><code>whereDate($args)\n</code></pre> <p>Filter the posts by date. Arguments are equal to WP_Query::data_query</p> <pre><code> return $baseModel-&gt;whereMeta([\n                [\n                    'relation' =&gt; 'OR',\n                    [\n                        'key' =&gt; 'my_key',\n                        'value' =&gt; '1',\n                        'compare' =&gt; '!='\n                    ],\n                    [\n                        'key' =&gt; 'my_key',\n                        'compare' =&gt; 'NOT EXISTS'\n                    ],\n                ]\n            ])-&gt;get();\n</code></pre> <p>Filter the posts by meta.</p> <p>Those filters can be chained like:</p> <pre><code>WpPostModel::query()-&gt;whereTerm('tags', 'awesome')-&gt;whereMeta('great', 'NOT', '!=')-&gt;all();\n</code></pre> <p>This will get you all the posts having the tag \"awesome\" and where meta \"great\" is not equal to \"NOT\". The <code>-&gt;all()</code> could also be substitued by <code>-&gt;take(5)</code>, <code>-&gt;first()</code>.</p>"},{"location":"how-to/basics/post_models/#ordering-posts","title":"Ordering posts","text":"<p>Ordering posts can be done by adding <code>-&gt;order($order_by, $order)</code> to the chain, like:</p> <pre><code>WpPostModel::query()-&gt;whereTerm('tags', 'awesome')-&gt;order('id', 'ASC')-&gt;take(5);\n</code></pre> <p>This will get you the first 5 results of all posts the tag \"awesome\", ordered by id (ascending).</p> <p>To order by meta give as first argument <code>meta:{meta_key}</code> or to order as number <code>meta_num:{meta_key}</code></p>"},{"location":"how-to/basics/post_models/#collections","title":"Collections","text":"<p>The <code>get</code>, <code>take</code> and <code>all</code> methods return a Collection. OffbeatWP uses the Laravel Collection which gives you an awesome toolset.</p> <p>A collection is iterable, meaning that you can just loop over it in a foreach loop. This is really helpful within your template. Just can just send the collection to your view and loop over it with twig-like:</p> <pre><code>{% for event in events %}\n    &lt;h3&gt;{{ event.title }}&lt;/h3&gt;\n{% endfor %}\n</code></pre>"},{"location":"how-to/basics/post_models/#relationships","title":"Relationships","text":"<p>We made it possible to make relationships between posts, and query them fast. You can read more about it here.</p>"},{"location":"how-to/basics/post_types/","title":"Post types","text":"<p>Post and post types are one of the core elements of Wordpress, and one of the reasons Wordpress is so flexible. </p> <p>Even though the default Wordpress way of registering post types will still work with OffbeatWP, we would encourage you to use the OffbeatWP method to do it. It makes registering a post type a lot more declarative. </p> <p>This is how registering a post-type in OffbeatWP looks like:</p> <pre><code>offbeat('post-type')::make('download', 'Downloads', 'Download')\n    -&gt;model(DownloadModel::class)\n    -&gt;supports(['title', 'editor'])\n    -&gt;icon('dashicons-format-aside')\n    -&gt;notPubliclyQueryable()\n    -&gt;inRest(false)\n    -&gt;public()\n    -&gt;set();\n</code></pre> <p>Basically the first and last line are the most important. The first line:</p> <pre><code>offbeat('post-type')::make('download', 'Downloads', 'Download')\n</code></pre> <p>has three arguments, the <code>post_type</code>, <code>Plural label</code> a <code>Single label</code></p> <p>The last line (<code>-&gt;set()</code>) performs the actual \"register_post_type\".</p> <p>This line in between are settings of the post_type.</p>"},{"location":"how-to/basics/post_types/#register-in-service","title":"Register in service","text":"<p>Post types should be registered in a Service or Module (what basically is a Service as well). We recommend it by doing it like this:</p> <pre><code>class Downloads extends AbstractModule\n{\n    public function register()\n    {\n        add_action('init', [$this, 'registerContentTypes']);\n    }\n\n    public function registerContentTypes()\n    {\n        offbeat('post-type')::make('download', 'Downloads', 'Download')\n            -&gt;model(DownloadModel::class)\n            -&gt;supports(['title', 'editor'])\n            -&gt;icon('dashicons-format-aside')\n            -&gt;notPubliclyQueryable()\n            -&gt;inRest(false)\n            -&gt;public()\n            -&gt;set();\n\n...\n</code></pre>"},{"location":"how-to/basics/post_types/#register-the-related-model","title":"Register the related model","text":"<p>When you register the post_type you can set the related model with it. By the OffbeatWP knows how to map the posts the right model.</p> <pre><code>-&gt;model(Models\\DownloadModel::class)\n</code></pre>"},{"location":"how-to/basics/post_types/#available-methods-for-settings","title":"Available methods for settings","text":"<pre><code>rewrite($rewrite) ex: rewrite(['with_front' =&gt; false, 'slug' =&gt; 'client'])\n</code></pre> <pre><code>labels($labels)\n</code></pre> <pre><code>model($modelClass)\n</code></pre> <pre><code>isHierarchical($hierarchical = true)\n</code></pre> <pre><code>supports($support)\n</code></pre> <pre><code>notPubliclyQueryable()\n</code></pre> <pre><code>public($public = true)\n</code></pre> <pre><code>excludeFromSearch($exclude = true)\n</code></pre> <pre><code>showUI($showUI = true)\n</code></pre> <pre><code>icon($icon)\n</code></pre> <pre><code>inMenu($menu)\n</code></pre> <pre><code>inRest($showInRest = true)\n</code></pre> <pre><code>position($position = null)\n</code></pre> <pre><code>taxonomies(array $taxonomies)\n</code></pre> <p>For more information about register post type check the Wordpress documentation about register_post_type</p>"},{"location":"how-to/basics/post_types/#add-admin-columns-for-post-type","title":"Add admin columns for post type","text":""},{"location":"how-to/basics/post_types/#static-column","title":"Static column","text":"<pre><code>addAdminTableColumn(string $name, string $label, string $modelFunc)\n</code></pre> <p>The <code>$modelFunc</code> should contain the function / method name from within the model. The return value of that method  will be displayed in the column.</p>"},{"location":"how-to/basics/post_types/#sortable-column-based-on-meta","title":"Sortable column based on meta","text":"<p>Easily add a sortabke column to the admin table based on a specific meta value.</p> <pre><code>addAdminMetaColumn(string $metaName, string $label = '', string $orderBy = 'meta_value')\n</code></pre>"},{"location":"how-to/basics/relationships/","title":"Relationships (beta)","text":"<p>With a more advanced website, you often want to create relationships between posts. With OffbeatWP this is really simple.</p> <p>First, we have to install a service, this to your <code>config/services.php</code> file:</p> <pre><code>OffbeatWP\\Content\\Post\\Relations\\Service::class,\n</code></pre> <p>To make these queries run quickly we have to install an extra table in our database. This is done through WP-CLI, run from your terminal:</p> <pre><code>wp post-relations:install\n</code></pre>"},{"location":"how-to/basics/relationships/#defining-relationships","title":"Defining relationships","text":"<p>In your model, you can define the relationship like this</p> <pre><code>&lt;?php\nnamespace App\\Models;\n\nuse OffbeatWP\\Content\\Post\\PostModel;\n\nclass EventPostModel extends PostModel {\n    public const POST_TYPE = 'event';\n\n    public function locations(): HasMany\n    {\n        return $this-&gt;hasMany('{key}');\n    }\n}\n</code></pre> <p>The key is something you make up yourself to identify the relationship. We recommend something declarative like the post type \"event_location\".</p> <p>Besides <code>-&gt;hasMany</code> you can use <code>-&gt;hasOne()</code>, <code>-&gt;belongsTo()</code> or <code>-&gt;belongsToMany()</code></p>"},{"location":"how-to/basics/relationships/#attaching-and-detaching-relationships-for-hasone-and-hashany","title":"Attaching and Detaching relationships (for hasOne and hasHany)","text":"<p>Now you can attach another post by doing:</p> <pre><code>$event-&gt;locations()-&gt;attach($id);\n</code></pre> <p>If you also use an array of ids to attach multiple posts at once. By default, the relations are appended to existing relationships. If you what to replace the existing relationships, you just have to add a second parameter with the value <code>false</code> like:</p> <pre><code>$event-&gt;locations()-&gt;attach([1,2,3], false);\n</code></pre> <p>You can detach an relationship by doing:</p> <pre><code>$event-&gt;locations()-&gt;detach($id);\n</code></pre> <p>or to detach all relationships.</p> <pre><code>$event-&gt;locations()-&gt;detachAll();\n</code></pre>"},{"location":"how-to/basics/relationships/#associating-and-dissociating-relationships-for-belongsto-and-belongstomany","title":"Associating and Dissociating relationships (for belongsTo and belongsToMany)","text":"<p>Now you can associate another post by doing:</p> <pre><code>$location-&gt;events()-&gt;associate($id);\n</code></pre> <p>If you also use an array of ids to associate multiple posts at once. By default, the relations are appended to existing relationships. If you what to replace the existing relationships, you just have to add a second parameter with the value <code>false</code> like:</p> <pre><code>$location-&gt;events()-&gt;associate([1,2,3], false);\n</code></pre> <p>You can dissociate an relationship by doing:</p> <pre><code>$event-&gt;locations()-&gt;dissociate($id);\n</code></pre> <p>or to dissociate all relationships.</p> <pre><code>$event-&gt;locations()-&gt;dissociateAll();\n</code></pre>"},{"location":"how-to/basics/relationships/#using-relationships","title":"Using relationships","text":"<pre><code>$event-&gt;locations()-&gt;get();\n</code></pre>"},{"location":"how-to/basics/repositories/","title":"Repositories","text":"<p>If you want to get data from different places and want to reuse this functionality within the project. Is it possible to use a repository within offbeatwp. This is useful when editing data before sending it to the controller. It is good practice to create a repository for somewhat more difficult logic. </p> <p>It is recommended to add repositories in one way.</p>"},{"location":"how-to/basics/repositories/#inside-a-module","title":"Inside a module","text":"<p>Modules group a certain kind of functionality. For example an agenda, quote module and so on. You can create a repository within a module and use its functionality.</p> <p>As you may have seen in the basic module.  You need to create repository file. This is what it would look like: </p> <pre><code>&lt;?php\n\nnamespace Modules\\Agenda\\Repositories;\n\nuse App\\Models\\PostModel;\nuse Modules\\Agenda\\Models\\EventModel;\n\nclass AgendaRepository\n{\n\n    public function getAgendaOverviewItems($settings)\n    {\n        $taxonomy = 'agenda_category';\n        // Some logic\n        return $postModel-&gt;paginated()-&gt;get();\n    }\n\n\n}\n</code></pre>"},{"location":"how-to/basics/repositories/#binding-the-repository","title":"Binding the repository","text":"<p>You also have to bind the repository. So you can use it. To so this, you have to add the next to the main file. The main file is <code>agenda.php</code> in the example.</p> <p>In the file you need to add this:</p> <pre><code>    public $bindings = [\n        'agenda' =&gt; Repositories\\AgendaRepository::class,\n    ];\n</code></pre>"},{"location":"how-to/basics/repositories/#using-the-repository","title":"Using the repository.","text":"<p>You can call the repository anywhere using <pre><code>$agendaRepository = offbeat('agenda');\n</code></pre></p> <p>To call a methode</p> <pre><code>$agendaRepository-&gt;getAgendaOverviewItems() or offbeat('agenda')-&gt;getAgendaOverviewItems()\n</code></pre>"},{"location":"how-to/basics/routing/","title":"Routing","text":"<p>OffbeatWP has two ways of routing. The first uses the default Wordpress rewrite rules and will map them to the OffbeatWP controllers. This is done by a \"callback route\". The second one lets you define a route based on the URL</p>"},{"location":"how-to/basics/routing/#callback-routes","title":"Callback routes","text":"<p>Example of a callback route:</p> <pre><code>offbeat('routes')-&gt;callback( \n    function () {\n        return is_archive();\n    },\n    [PostsController::class, 'actionArchive']\n);\n</code></pre> <p>The first attribute is the callback, this will be executed to find a match for the current request. If the callback returns true a match is found and it will not check any other later defined routes. If the callback returns false there was no match and it will check the next defined route. </p> <p>Routes can be defined everywhere, as long as they are registered before WordPress tries to render the page. But OffbeatWP has preferred two ways to define routes:</p>"},{"location":"how-to/basics/routing/#url-routes","title":"URL routes","text":"<p>The most basic URL routes accept a URL, providing a very simple and expressive method.  You can use a <code>-&gt;get()</code>, <code>-&gt;post()</code>, <code>-&gt;patch()</code>, <code>-&gt;put()</code> or  <code>-&gt;delete()</code> method based on what you need. Sometimes you will need to capture segments of the URL within your route. For example, you may need to capture a user's ID from the URL. You may do so by defining route parameters:</p> <pre><code>offbeat('routes')-&gt;get('user/{user_id}/',\n    [UserController::class, 'getThisUser']\n);\n</code></pre>"},{"location":"how-to/basics/routing/#ajax-route","title":"Ajax route","text":"<pre><code>offbeat('ajax')-&gt;make('name', Ajax\\Folder\\ClassName::class);\n</code></pre>"},{"location":"how-to/basics/routing/#1-in-your-themes-route-folder","title":"1. In your themes route folder","text":"<p>In the root of your theme, you'll find a folder named <code>routes</code>. This contains three files by default: - ajax.php - api.php - web.php</p> <p>Currently, there isn't a real difference between the files, but the helps you to group the routes.</p>"},{"location":"how-to/basics/routing/#2-in-your-modules-service","title":"2. In your modules service","text":"<p>When the controllers are in your module, it would make sense the define the routes into your module as well. The recommended way of doing this is by defining it into your Module-file. </p> <p>Add this to your <code>register</code> method:</p> <pre><code>add_action('before_route_matching', [ $this, 'registerRoutes' ]);\n</code></pre>"},{"location":"how-to/basics/taxonomies/","title":"Taxonomies","text":"<p>Taxonomies are one of the core elements of Wordpress to structure posts. </p> <p>Even though the default Wordpress way of registering taxonomies will still work with OffbeatWP, we would encourage you to use the OffbeatWP method to do it. It makes registering a taxonomy a lot more declarative. </p> <p>This is how registering a post-type in OffbeatWP looks like:</p> <pre><code>offbeat('taxonomy')::make('download_category', ['download'], 'Categories', 'Category')\n    -&gt;model(Models\\DownloadCategoryModel::class)\n    -&gt;hierarchical(true)\n    -&gt;notPubliclyQueryable()\n    -&gt;set();\n</code></pre> <p>Basically the first and last line are the most important. The first line:</p> <pre><code>offbeat('taxonomy')::make('download_category', ['download'], 'Categorie\u00ebn', 'Categorie')\n</code></pre> <p>has four arguments, the <code>taxonomy</code>, <code>post_types</code>, <code>Plural label</code> and a <code>Single label</code></p> <p>The last line (<code>-&gt;set()</code>) performs the actual \"register_taxonomy\".</p> <p>This line in between are settings of the taxonomy.</p>"},{"location":"how-to/basics/taxonomies/#register-in-service","title":"Register in service","text":"<p>Taxonomies should be registered in a Service or Module (what basically is a Service as well). We recommend it by doing it like this:</p> <pre><code>class Downloads extends AbstractModule\n{\n    public function register()\n    {\n        add_action('init', [$this, 'registerContentTypes']);\n    }\n\n    public function registerContentTypes()\n    {\n        offbeat('taxonomy')::make('download_category', ['download'], 'Categories', 'Category')\n            -&gt;model(Models\\DownloadCategoryModel::class)\n            -&gt;hierarchical(true)\n            -&gt;notPubliclyQueryable()\n            -&gt;set();\n\n...\n</code></pre>"},{"location":"how-to/basics/taxonomies/#register-the-related-model","title":"Register the related model","text":"<p>When you register the taxonomy you can set the related model with it. By the OffbeatWP knows how to map the terms the right model.</p> <pre><code>-&gt;model(Models\\DownloadCategoryModel::class)\n</code></pre>"},{"location":"how-to/basics/taxonomies/#available-methods-for-settings","title":"Available methods for settings","text":"<pre><code>rewrite($rewrite)\n</code></pre> <pre><code>labels($labels)\n</code></pre> <pre><code>model($modelClass)\n</code></pre> <pre><code>hierarchical($hierarchical = false)\n</code></pre> <pre><code>notPubliclyQueryable()\n</code></pre> <pre><code>public($public = true)\n</code></pre> <pre><code>showUI($showUI = true)\n</code></pre> <pre><code>inMenu($menu)\n</code></pre> <pre><code>showAdminColumn($showAdminColumn = true)\n</code></pre> <pre><code>metaBox($metaboxCallback)\n</code></pre> <pre><code>capabilities(array $capabilities = [])\n</code></pre> <pre><code>hierarchyDepth(int $depth)\n</code></pre> <pre><code>showNavMenus(bool $show = true)\n</code></pre> <pre><code>showTagCloud(bool $show = true)\n</code></pre> <pre><code>hideMetaBox(bool $showAdminColumn = true)\n</code></pre> <pre><code>useCheckboxes()\n</code></pre> <pre><code>hideDescriptionField()\n</code></pre> <pre><code>hideParentField()\n</code></pre> <p>For more information about registering taxonomies check the Wordpress documentation about register_taxonomy</p>"},{"location":"how-to/basics/term_models/","title":"Term models","text":"<p>Models are one of the cool features of OffbeatWP. It gives a much more intuitive way of getting data from a post or term like the title, content or url.</p> <p>OffbeatWP has two types of models: 1. Post models     A post model represents a post in a specific post type 2. Term Models     A term model represents a term in a specific taxonomy</p> <p>A term model represents a term of a specific taxonomy. Below an example of a term model:</p> <pre><code>&lt;?php\nnamespace App\\Models;\n\nuse OffbeatWP\\Content\\Taxonomy\\TermModel;\n\nclass TagModel extends TermModel {\n    const TAXONOMY = 'tag';\n    const ORDER_BY  = 'menu_order';\n    const ORDER     = 'ASC';\n}\n</code></pre>"},{"location":"how-to/basics/term_models/#creating-a-model","title":"Creating a model","text":"<p>To create a model you can use the CLI-command:</p> <pre><code>wp offbeatwp make-termmodel {name} --taxonomy=\"{taxonomy}\"\n</code></pre> <p>If you want to create a model for a module you can do this by adding <code>--module={module_name}</code> to the command like:</p> <pre><code>wp offbeatwp make-termmodel {name} --taxonomy={taxonomy}--module={module_name}\n</code></pre>"},{"location":"how-to/basics/term_models/#associating-a-taxonomy-to-a-model","title":"Associating a taxonomy to a model","text":"<p>OffbeatWP maps terms to the related model. But to make this possible we have to register the models. When you register the taxonomy within your theme you can do this all at once as explained here. But if the taxonomy is building (like category, post_tag), or is defined within a plugin you have to do this by:</p> <pre><code>offbeat('taxonomy')-&gt;registerTermModel('post_tag', \\App\\Models\\PostTagModel::class);\n</code></pre>"},{"location":"how-to/basics/term_models/#getting-data-from-a-model","title":"Getting data from a model","text":"<p>By default the PostModel comes with the following methods to get data from the post:</p>"},{"location":"how-to/basics/term_models/#getid","title":"<code>getId()</code>","text":"<p>Get the id of the term</p>"},{"location":"how-to/basics/term_models/#getname","title":"<code>getName()</code>","text":"<p>Get the name of the term</p>"},{"location":"how-to/basics/term_models/#getslug","title":"<code>getSlug()</code>","text":"<p>Get the slug of the term</p>"},{"location":"how-to/basics/term_models/#getdescription","title":"<code>getDescription()</code>","text":"<p>Get the description of the term</p>"},{"location":"how-to/basics/term_models/#getlink","title":"<code>getLink()</code>","text":"<p>Get the link of the term</p>"},{"location":"how-to/basics/term_models/#getparentid","title":"<code>getParentId()</code>","text":"<p>Get the parent id of the term</p>"},{"location":"how-to/basics/term_models/#getparent","title":"<code>getParent()</code>","text":"<p>Get the parent term (model) of the term</p>"},{"location":"how-to/basics/term_models/#getmetakey-single-true","title":"<code>getMeta($key, $single = true)</code>","text":"<p>Get a meta value of the term. The first attribute is the key to the meta. The second parameter if you want to have single or multiple responses. Single is the default.</p>"},{"location":"how-to/basics/term_models/#setmetakey-value","title":"<code>setMeta($key, $value)</code>","text":"<p>Setting a meta to the term. The argument is the key, the second the value of the meta.</p>"},{"location":"how-to/basics/term_models/#setmetakey-value_1","title":"<code>setMeta($key, $value)</code>","text":"<p>Setting a meta to the term. The argument is the key, the second the value of the meta.</p>"},{"location":"how-to/basics/term_models/#getposts","title":"<code>getPosts()</code>","text":"<p>Returns an instance of WpQueryBuilder so you are able to use functionals like <code>-&gt;all()</code>, <code>-&gt;take()</code> or <code>-&gt;first()</code></p>"},{"location":"how-to/basics/term_models/#macro","title":"Macro","text":"<p>You can extend any term model from outside the model itself. This is called a macro. We have a independent service to integrate [Advanded Custom Fields }(https://www.advancedcustomfields.com/pro/) with OffbeatWP. Within the term model, we want to be able to easily get an ACF field. The service contains the following <code>macro</code>:</p> <pre><code>TermModel::macro('getField', function ($name, $format = true) {\n    return get_field($name, $this-&gt;wpTerm, $format);\n});\n</code></pre> <p>Now we can easily access the term' ACF field be doing:</p> <pre><code>term.getField('key')\n</code></pre>"},{"location":"how-to/basics/term_models/#getting-terms","title":"Getting terms","text":"<p>You can get the terms of the model just by doing the following:</p> <pre><code>TermModel::query()-&gt;all();\n</code></pre> <p>or to take a maximum number of terms:</p> <pre><code>TermModel::query()-&gt;take(5);\n</code></pre> <p>or return just the first match.</p> <pre><code>TermModel::query()-&gt;first();\n</code></pre> <p>Find term by id: <pre><code>TermModel::query()-&gt;findById($id);\n</code></pre></p> <p>Find term by slug <pre><code>TermModel::query()-&gt;findBySlug($slug);\n</code></pre></p> <p>Find term by name <pre><code>TermModel::query()-&gt;findByName($name);\n</code></pre></p>"},{"location":"how-to/basics/term_models/#filter-results","title":"Filter results","text":"<p>Like with the post models you can chain some methods to filter terms:</p> <p><code>where($args)</code></p> <p>The arguments are equal to WP_Term_Query::__construct. But since this won't make your code very readable we do not recommend this filter.</p> <p><code>whereMeta($key, $value = '', $compare = '')</code></p> <p>Filter the terms by meta.</p> <p><code>whereRelatedToPost($postIds)</code></p> <p>Filter the terms by related posts. $postIds can by an array of integer.</p> <p><code>excludeEmpty($hideEmpty = true)</code></p> <p>Exclude empty terms</p> <p>Example:</p> <pre><code>TermModel::query()-&gt;whereMeta('isAwesome', 'totally')-&gt;excludeEmpty()-&gt;take(5);\n</code></pre> <p>This will get the terms where meta \"isAwesome\" equals to \"totally\", empty terms are excluded and just take 5 terms.</p>"},{"location":"how-to/basics/term_models/#order-terms","title":"Order terms","text":"<p>Ordering terms can be done by adding <code>-&gt;order($order_by, $order)</code> to the chain, like:</p> <pre><code>TermModel::query()-&gt;whereMeta('isAwesome', 'totally')-&gt;order('term_id', 'ASC')-&gt;take(5);\n</code></pre> <p>This will get you the first 5 results of all posts the tag \"awesome\", ordered by id (ascending).</p> <p>To order by meta give as first argument <code>meta:{meta_key}</code> or to order as number <code>meta_num:{meta_key}</code></p>"},{"location":"how-to/basics/views/","title":"Views","text":"<p>OffbeatWP uses Twig as template engine by default. It is part of the Symfony project and is widely supported.</p> <p>Check the website of Twig for the documentation</p>"},{"location":"how-to/basics/views/#added-offbeatwp-functionality","title":"Added OffbeatWP Functionality","text":"<p><code>{{ config($key) }}</code> Get settings from one of the files in the <code>/config</code> folder.</p> <p><code>{{ assetUrl($file) }}</code> Files that are compiled through the OffbeatWP asset builder (CSS, js and images) has a hashed name. To get the correct path you should use this method which checks the manifest and maps returns the correct URL.</p> <p><code>{{ component($name, $args = []) }}</code> Getting and rendering a OffbeatWP Component (More about components)</p> <p><code>{{ setting($key) }}</code> OffbeatWP has functiontality included for site settings. The only implementation now is through ACF. OffbeatWP has already implemented this. Check out the documentation.</p>"},{"location":"how-to/basics/views/#added-wordpress-functionality","title":"Added Wordpress Functionality","text":"<p>Within your twig template, you'll have access to a <code>wp</code> global variable. Through this variable, you have access to a lot of the default Wordpress functionality. </p> <p><code>{{ wp.head }}</code> -&gt; wp_head();</p> <p><code>{{ wp.footer }}</code> -&gt; wp_footer();</p> <p><code>{{ wp.title }}</code> -&gt; wp_title();</p> <p><code>{{ wp.languageAttributes }}</code> -&gt; get_language_attributes();</p> <p><code>{{ wp.navMenu($args) }}</code> -&gt; wp_nav_menu($args);</p> <p><code>{{ wp.homeUrl }}</code> -&gt; get_home_url();</p> <p><code>{{ wp.siteUrl }}</code> -&gt; site_url();</p> <p><code>{{ wp.blogId }}</code> -&gt; get_current_blog_id();</p> <p><code>{{ wp.bloginfo($name) }}</code> -&gt; get_bloginfo($name, 'display');</p> <p><code>{{ wp.bodyClass($class = '') }}</code> -&gt; body_class($class);</p> <p><code>{{ wp.action($action) }}</code> -&gt; do_action($action);</p> <p><code>{{ wp.shortcode($shortcode) }}</code> -&gt; do_shortcode($shortcode);</p> <p><code>{{ wp.sidebar($name) }}</code> -&gt; dynamic_sidebar($name);</p> <p><code>{{ wp.attachmentUrl($attachmentID, $size = 'full') }}</code> -&gt; wp_get_attachment_image_src($attachmentID, $size);</p> <p><code>{{ wp.getAttachmentImage($attachmentID, $size = 'thumbnail', $classes = ['img-fluid']) }}</code> -&gt; wp_get_attachment_image($attachmentID, $size, false, ['class' =&gt; implode(' ', $classes)]);</p> <p><code>{{ wp.formatDate($format, $date, $strtotime = false) }}</code> -&gt; date_i18n($format, $date);</p> <p><code>{{ wp.resetPostdata() }}</code> -&gt; wp_reset_postdata();</p> <p><code>{{ wp.isFrontPage() }}</code> -&gt; is_front_page();</p> <p><code>{{ wp.templateUrl($path = null) }}</code> -&gt; get_template_directory_uri();</p> <p><code>{{ __('{string}', '{textdomain}') }}</code> -&gt; __($string, $textdomain);</p> <p><code>{{ gf.form(settings.form.id, false, false, false, null, true) | raw }}</code> get gravity form</p> <p><code>{{ dump(wp.allPostMeta) }}</code> get all post meta from the current post or (<code>wp.allPostMeta($postId)</code> for a specefic post (you can add <code>&lt;pre&gt;</code> tags to make it more clear)</p>"},{"location":"introduction/what-is-offbeatwp/","title":"What is OffbeatWP","text":"<p>OffbeatWP is a component-based (more on this later) theming framework for WordPress. But actually, it's a bit more than that. It uses the most modern WordPress technologies including:</p> <ul> <li>Composer</li> <li>Dependency Injection (using PHP-DI)</li> <li>Webpack for compiling assets</li> <li>MVC (model-view-controller)</li> </ul> <p>It's our mission to create a more professional and standardized way of developing WordPress themes. Because WordPress doesn't guide you on how to structure your theme, themes get messy and very often slow.</p> <p>Besides that, every developer has its habits which makes it hard to onboard new developers on the project of transferring the codebase to another developer.</p>"},{"location":"introduction/what-is-offbeatwp/#for-who-is-offbeatwp","title":"For who is OffbeatWP","text":"<p>OffbeatWP is made for agencies and other professionals who make custom websites for themselves and clients. Especially when you have a website with a large codebase and a wide variety of post-types and taxonomies you will experience OffbeatWP as a blessing.</p> <p>If you are a creator of templates to sell themes (on ThemeForest for example) OffbeatWP is not (yet) the best choice because it doesn't support child themes yet. </p>"},{"location":"introduction/what-is-offbeatwp/#component-based","title":"Component-based","text":"<p>In a world where every page on a website is a 'landing page', it's important to have the ability to make every page attractive. WordPress by default offers templates, shortcodes, widgets, and blocks (Gutenberg) to build your website's pages. But very often you want to use the element in your template, as a shortcode, and as a widget. Here components fall into place. Components are abstract elements that can be called within a template but have also been mapped to a shortcode, widget, block (soon) of any other page builder element. This makes your theme much more maintainable.</p> <p>More on how to use components</p>"},{"location":"introduction/what-is-offbeatwp/#why-do-you-want-to-work-with-offbeatwp","title":"Why do you want to work with OffbeatWP?","text":"<p>WordPress is an amazing open-source CMS system. But WordPress has some bad-sides, especially for custom-made websites. Below are some bad-sides of WordPress and how OffbeatWP is solving those (based on this post):</p>"},{"location":"introduction/what-is-offbeatwp/#1-in-wp-everything-is-a-post","title":"#1: In WP \u201ceverything is a post\u201d","text":"<p>Even though the \"everything is a post\" approach gives WordPress a lot of flexibility, sometimes it makes things a bit messy. OffbeatWP makes it possible to have a model per post-type helping you to structure your code and making it convenient to work with.</p>"},{"location":"introduction/what-is-offbeatwp/#2-the-loop-bites-you-in-the-ass-at-least-a-half-dozen-times-per-project","title":"#2: The Loop bites you in the ass at least a half dozen times per project.","text":"<p>Say goodbye to \"The Loop\". Since OffbeatWP uses Collections (from Laravel) and models you have easy access to the post` data. As an example, you can get the permalink of the post. With as following:</p> <pre><code>post.permalink\n</code></pre>"},{"location":"introduction/what-is-offbeatwp/#3-its-slow","title":"#3: It\u2019s slow.","text":"<p>By default, WordPress isn't slow at all. Most of the time it is a combination of bad written themes and plugins, and not well configured hosting that makes WordPress slow. OffbeatWP can help you with professional writing your theme so only the code that needs to be executed is executed.</p>"},{"location":"introduction/what-is-offbeatwp/#4-its-really-really-hard-to-get-consistent-caching-logic","title":"#4: It\u2019s really, really hard to get consistent caching logic.","text":"<p>In our humble opinion, you shouldn't use any page caching at all. It's our goal that every request to WordPress is handled and finished within 200ms. That's our budget. If a request exceeds this budget we have to optimize the request to make it happen.</p>"},{"location":"introduction/what-is-offbeatwp/#5-there-is-no-way-of-doing-version-control-of-any-dependencies","title":"#5: There is no way of doing version control of any dependencies","text":"<p>OffbeatWP uses composer (for PHP packages) and npm (for asset building like scss, js, fonts, etc). These are version-controlled libraries. We encourage plugin developers to make their plugins also available as a Service. With this all the dependencies of your website will be defined in your theme, all versions controlled.</p>"},{"location":"introduction/concepts/components/","title":"Components","text":"<p>After a component is made, you have to possibilty to call it in the twig template itself. For example:</p> <pre><code>{{ component('componentName', {'posts' : posts, 'showResultButton' : true}) }}\n</code></pre>"},{"location":"introduction/concepts/container/","title":"Container","text":"<p>The container manages the dependencies and is performing the dependency injection. OffbeatWP uses the powerful implementation of PHP DI. You can find the documentation of PHP DI here.</p> <p>Example: <pre><code>&lt;?php\nnamespace App\\Controllers;\n\nuse OffbeatWP\\Controllers\\AbstractController;\nuse App\\Repositories\\PageRepository;\n\nclass PagesController extends AbstractController {\n    public function actionSingle($id, PageRepository $pageRepository)\n    {\n        $post = $pageRepository-&gt;find($id);\n        echo $this-&gt;render('pages/page', ['post' =&gt; $post]);\n    }\n}\n</code></pre></p> <p>In this example, the <code>PageController</code> needs to get a specific page from the database. We can use a repository to do so. So we will inject the repository, the container will do this automatically. This is extremely useful in case of unit testing. When running a test we easily can swap the repository by a dummy implementation and run that method with dummy data.</p>"},{"location":"introduction/concepts/container/#binding","title":"Binding","text":"<p>To be able to inject certain classes you need to bind them. You need to do this in a service. You can easily do this by filling the bindings parameters in the service like this:</p> <pre><code>&lt;?php\nnamespace OffbeatWP\\AcfSiteSettings;\n\nuse OffbeatWP\\Services\\AbstractService;\nuse OffbeatWP\\Contracts\\SiteSettings as SiteSettingsContract;\n\nclass Service extends AbstractService {\n    public $bindings = [\n        SiteSettingsContract::class =&gt; SiteSettings::class\n    ];\n}\n</code></pre>"},{"location":"introduction/concepts/services/","title":"Service","text":"<p>A service is a  script that contains code to bootstrap a specific functionality of the website. The service is also the place to define bindings to the container.</p> <p>All the functionality to your website is initiated through services. So your website will contain multiple services, but also external functionality (pulled through composer) will be added to your theme as service.</p> <p>You have to register the service to have it bootstrapped. A service is registered in the <code>config/services.php</code> file, like this:</p> <pre><code>OffbeatWP\\Services\\ServiceScripts::class,\n</code></pre>"},{"location":"introduction/concepts/services/#writing-a-service","title":"Writing a Service","text":"<p>A service needs to be extended from  <code>use OffbeatWP\\Services\\AbstractService</code>. A service can contain a <code>register</code> method. The register method is being executed right after all the services are registered. At the point, all the bindings already exist.</p> <p>You can easily scaffold a service by executing this CLI command:</p> <pre><code>wp offbeatwp make-service {name}\n</code></pre> <p>Make sure the service is in CamelCase.</p> <p>This will create you an empty service in the <code>app/services.php</code> folder. You have to manually add it to <code>config/services.php</code>.</p>"},{"location":"introduction/getting-started/configuration/","title":"Configuration","text":"<p>When you have installed Wordpress and initiated the OffbeatWP theme you are good to go. There is no configuration to make OffbeatWP work. But there are some configurations you need to know about:</p>"},{"location":"introduction/getting-started/configuration/#developing","title":"Developing","text":"<p>By default, OffbeatWP assumes you are in the <code>production</code> mode. This means for example that the twig-templates are compiled to <code>/wp-content/caches/twig</code>. During development, you don't want this of course. You need to tell OffbeatWP you are in development mode. This is easily done by adding this to your <code>wp-config.php</code>:</p> <pre><code>define('WP_ENV', 'development');\n</code></pre>"},{"location":"introduction/getting-started/configuration/#defining-menu-locations","title":"Defining menu locations:","text":"<p>Open the file <code>config/menus.php</code>. You can easy defined a new menu location by adding this to the array: <pre><code>'{slug}' =&gt; '{name}',\n</code></pre></p>"},{"location":"introduction/getting-started/configuration/#defining-sidebars","title":"Defining sidebars:","text":"<p>Open the file <code>config/sidebars.php</code>. You can easy defined a new sidebar by adding this to the array: <pre><code>    '{id}' =&gt; [\n        'name'          =&gt; '{name}',\n        'description'   =&gt; '{description}',\n        'before_widget' =&gt; '&lt;div id=\"%1$s\" class=\"widget %2$s\"&gt;',\n        'after_widget'  =&gt; '&lt;/div&gt;',\n        'before_title'  =&gt; '&lt;h4 class=\"widgettitle\"&gt;',\n        'after_title'   =&gt; '&lt;/h4&gt;',\n    ]\n</code></pre></p> <p>You have the same parameters available like with using <code>register_sidebar</code>, except <code>id</code>.</p>"},{"location":"introduction/getting-started/configuration/#defining-additional-image-sizes","title":"Defining additional image sizes:","text":"<p>Open the file <code>config/images.php</code>. You can easy defined an image size by adding this to the array: <pre><code>    '{name}' =&gt; [\n        'width' =&gt; {width | int},\n        'height' =&gt; {height | int},\n        'crop' =&gt; {true|false}\n    ]\n</code></pre></p>"},{"location":"introduction/getting-started/configuration/#adding-services","title":"Adding services","text":"<p>Open the file <code>config/services.php</code>. You can easily add a service by adding it to the array: <pre><code>    OffbeatWP\\Services\\ServiceScripts::class,\n</code></pre></p> <p>The order of the services defines the order of when the services are initiated.</p>"},{"location":"introduction/getting-started/deploying/","title":"Deploying","text":"<p>Installing your website for the first time is with OffbeatWP no different than with any other Wordpress + Theme. But for deploying ongoing work we advise you the following approach:</p>"},{"location":"introduction/getting-started/deploying/#1-have-a-git-repository-containing-your-offbeatwp-theme","title":"1. Have a GIT repository containing your OffbeatWP theme.","text":""},{"location":"introduction/getting-started/deploying/#2-setup-an-automated-tool-like-jenkins-gitlab-ci-or-deployhq-to-handle-the-deployment-process-for-you","title":"2. Setup an automated tool like Jenkins, Gitlab CI or DeployHQ to handle the deployment process for you.","text":"<p>On a regular project we have a script like this in our deployment tool (deployment tool handles ssh connection):</p> <pre><code>cd {$theme-folder-of-your-website}\ngit pull\ncomposer install\nyarn install\nyarn offbeatwp production\nrm -rf ../../cache/twig/*\n</code></pre>"},{"location":"introduction/getting-started/deploying/#explanation-per-line","title":"Explanation per line:","text":"<ol> <li> <p><code>cd {$theme-folder-of-your-website}</code> Getting into your theme folder</p> </li> <li> <p><code>git pull</code> Getting the latest content from the GIT</p> </li> <li> <p><code>composer install</code> Updating composer packages based on the composer.lock in your theme</p> </li> <li> <p><code>yarn offbeatwp production</code> Updating npm packages based on the yarn.lock in your theme</p> </li> <li> <p><code>rm -rf ../../cache/twig/*</code> Clearing the Twig compiled files  </p> </li> </ol>"},{"location":"introduction/getting-started/deploying/#3-run-deployment-semi-automatically-on-commit-to-a-specific-branch-or-pushing-a-builddeploy-button-in-your-deployment-tool","title":"3. Run deployment (semi-)automatically on commit to a specific branch or pushing a \"build/deploy\" button in your deployment tool.","text":""},{"location":"introduction/getting-started/directory-structure/","title":"Directory structure","text":"<p>The directory structure of an OffbeatWP look like this:</p> <ul> <li>app<ul> <li>Controllers<ul> <li>ErrorsController.php</li> <li>PagesController.php</li> <li>PostsController.php</li> <li>SearchController.php</li> </ul> </li> <li>Models<ul> <li>PageModel.php</li> <li>PostModel.php</li> </ul> </li> <li>Services<ul> <li>SiteService.php</li> </ul> </li> </ul> </li> <li>assets     Empty by default, the compiled assets will be in here</li> <li>components     Empty by default will contain the website` components</li> <li>composer.json     This file stores the PHP dependencies</li> <li>config<ul> <li>app.php      (Website settings)</li> <li>images.php     (Additional image sizes)</li> <li>menus.php     (Menu locations)</li> <li>services.php     (Services of the website)</li> <li>sidebars.php     (Define sidebars for your website)</li> </ul> </li> <li>functions.php     This is a default Wordpress theme file. OffbeatWP uses it the spin up the framework.</li> <li>index.php     This is a default Wordpress theme file. OffbeatWP uses it as an entry of the view.</li> <li>modules     Empty by default will contain the website` modules</li> <li>package.json     This file stores the NPM dependencies</li> <li>resources<ul> <li>config.js     Config file for the Webpack builder</li> <li>img     Containing your website' images</li> <li>js     Containing your website' javascript</li> <li>sass     Containing your website' styles</li> <li>views     Containing your website' views (or partly)</li> </ul> </li> <li>routes<ul> <li>ajax.php     (Routes for ajax)</li> <li>api.php     (Routes for API call)</li> <li>web.php     (Routes for normal pages)</li> </ul> </li> <li>screenshot.png     Is used as a preview image in the overview of the available themes</li> <li>style.css     _This is a default Wordpress theme file, only used for the basic theme information like name, author, license, etc. _</li> <li>tests     contains your website' unit tests (still needs to be implemented)</li> <li>vendor     contains the fetched libraries through composer</li> </ul>"},{"location":"introduction/getting-started/installation/","title":"Installation","text":""},{"location":"introduction/getting-started/installation/#requirements","title":"Requirements","text":"<p>The use OffbeatWP the following services / packages are required:</p> <ul> <li>Composer</li> <li>Git</li> <li>NPM / Yarn</li> <li>Node</li> <li>WP-CLI</li> <li>Webserver (Nginx / Apache)</li> <li>Database (Mysql / MariaDB)</li> <li>PHP (7.2+ recommended)</li> </ul> <p>How to install it depends on the operation system you are using. For Mac users: Homebrew is your friend.</p>"},{"location":"introduction/getting-started/installation/#optional-but-recommended","title":"Optional, but recommended","text":"<ul> <li>Advanced Custom Fields Pro ($18,- for single website / $70 for developer licence (unlimited sites))</li> </ul> <p>To be honest, we're in love with this plugin. It delivers awesome functionality and joined with OffbeatWP, magic is happening. OffbeatWP integrates ACF in three different areas: 1. Adding fields on post types and terms and make them available in the models automatically. Learn more 2. Site settings. Creating different sections of global settings for your website. Learn more 3. Pagebuilder with OffbeatWP Components. Learn more about ACF Layout with OffbeatWP</p>"},{"location":"introduction/getting-started/installation/#install-offbeatwp-wp-cli-package","title":"Install OffbeatWP WP-CLI package","text":"<p>To make it easier to install and scaffold OffbeatWP themes and elements we introduced the WP-CLI package. You can easily install it with the following command:</p> <pre><code>wp package install https://github.com/offbeatwp/wp-cli-offbeatwp.git\n</code></pre>"},{"location":"introduction/getting-started/installation/#install-wordpress-theme-and-framework","title":"Install Wordpress, Theme, and Framework","text":""},{"location":"introduction/getting-started/installation/#1-install-wordpress","title":"1. Install Wordpress","text":"<p>We can easily install Wordpress through WP-CLI:</p> <pre><code>mkdir {folder_name}\ncd {folder_name}\nwp core download\nwp core config --dbname=\"{dbname}\" --dbuser=\"{dbuser}\" --dbpass=\"{dbpassword}\" --dbhost=\"{dbhost}\" --dbprefix=\"{prefix}\"\nwp core install --url=\"{url}\" --title=\"{title}\" --admin_user=\"{username}\" --admin_email=\"{email}\"\n</code></pre>"},{"location":"introduction/getting-started/installation/#2-install-the-theme","title":"2. Install the theme","text":"<p><pre><code>wp offbeatwp init-theme {theme-slug}\n</code></pre> The latest bootstrap theme should be automatically been downloaded from git and activated within WordPress.</p>"},{"location":"introduction/getting-started/installation/#3-enjoy-working-with-offbeatwp","title":"3. Enjoy working with OffbeatWP","text":"<p>When you access the website you should see a link to the default \"Hello world\" post. (Will replace this later with some Default OffbeatWP Introduction page)</p>"}]}